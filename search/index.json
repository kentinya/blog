[{"content":"安装Nginx 见NGINX\u0026ndash;安装小结。\nNginx配置文件\nupstream php-handler { #server 127.0.0.1:9000; server unix:/run/php/php8.2-fpm.sock;## 改为php版本 } # Set the `immutable` cache control options only for assets with a cache busting `v` argument map $arg_v $asset_immutable { \u0026#34;\u0026#34; \u0026#34;\u0026#34;; default \u0026#34;, immutable\u0026#34;; } server { listen 80; listen [::]:80; server_name cloud.example.com; # Prevent nginx HTTP Server Detection server_tokens off; # Enforce HTTPS return 301 https://$server_name$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; http2 on; server_name cloud.example.com; # Path to the root of your installation root /var/www/nextcloud; # Use Mozilla\u0026#39;s guidelines for SSL/TLS settings # https://mozilla.github.io/server-side-tls/ssl-config-generator/ ssl_certificate /etc/ssl/nginx/cloud.example.com.crt; ssl_certificate_key /etc/ssl/nginx/cloud.example.com.key; ssl_trusted_certificate /etc/nginx/ssl/***/***.ca.crt; # Prevent nginx HTTP Server Detection server_tokens off; # HSTS settings # WARNING: Only add the preload option once you read about # the consequences in https://hstspreload.org/. This option # will add the domain to a hardcoded list that is shipped # in all major browsers and getting removed from this list # could take several months. add_header Strict-Transport-Security \u0026#34;max-age=15768000; includeSubDomains; preload\u0026#34; always; # set max upload size and increase upload timeout: client_max_body_size 512M; client_body_timeout 300s; fastcgi_buffers 64 4K; # Enable gzip but do not remove ETag headers gzip on; gzip_vary on; gzip_comp_level 4; gzip_min_length 256; gzip_proxied expired no-cache no-store private no_last_modified no_etag auth; gzip_types application/atom+xml text/javascript application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; # Pagespeed is not supported by Nextcloud, so if your server is built # with the `ngx_pagespeed` module, uncomment this line to disable it. #pagespeed off; # The settings allows you to optimize the HTTP2 bandwidth. # See https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/ # for tuning hints client_body_buffer_size 512k; # HTTP response headers borrowed from Nextcloud `.htaccess` add_header Referrer-Policy \u0026#34;no-referrer\u0026#34; always; add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34; always; add_header X-Frame-Options \u0026#34;SAMEORIGIN\u0026#34; always; add_header X-Permitted-Cross-Domain-Policies \u0026#34;none\u0026#34; always; add_header X-Robots-Tag \u0026#34;noindex, nofollow\u0026#34; always; add_header X-XSS-Protection \u0026#34;1; mode=block\u0026#34; always; # Remove X-Powered-By, which is an information leak fastcgi_hide_header X-Powered-By; # Set .mjs and .wasm MIME types # Either include it in the default mime.types list # and include that list explicitly or add the file extension # only for Nextcloud like below: include mime.types; types { text/javascript js mjs; application/wasm wasm; } # Specify how to handle directories -- specifying `/index.php$request_uri` # here as the fallback means that Nginx always exhibits the desired behaviour # when a client requests a path that corresponds to a directory that exists # on the server. In particular, if that directory contains an index.php file, # that file is correctly served; if it doesn\u0026#39;t, then the request is passed to # the front-end controller. This consistent behaviour means that we don\u0026#39;t need # to specify custom rules for certain paths (e.g. images and other assets, # `/updater`, `/ocs-provider`), and thus # `try_files $uri $uri/ /index.php$request_uri` # always provides the desired behaviour. index index.php index.html /index.php$request_uri; # Rule borrowed from `.htaccess` to handle Microsoft DAV clients location = / { if ( $http_user_agent ~ ^DavClnt ) { return 302 /remote.php/webdav/$is_args$args; } } location = /robots.txt { allow all; log_not_found off; access_log off; } # Make a regex exception for `/.well-known` so that clients can still # access it despite the existence of the regex rule # `location ~ /(\\.|autotest|...)` which would otherwise handle requests # for `/.well-known`. location ^~ /.well-known { # The rules in this block are an adaptation of the rules # in `.htaccess` that concern `/.well-known`. location = /.well-known/carddav { return 301 /remote.php/dav/; } location = /.well-known/caldav { return 301 /remote.php/dav/; } location /.well-known/acme-challenge { try_files $uri $uri/ =404; } location /.well-known/pki-validation { try_files $uri $uri/ =404; } # Let Nextcloud\u0026#39;s API for `/.well-known` URIs handle all other # requests by passing them to the front-end controller. return 301 /index.php$request_uri; } # Rules borrowed from `.htaccess` to hide certain paths from clients location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/) { return 404; } location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) { return 404; } # Ensure this block, which passes PHP files to the PHP process, is above the blocks # which handle static assets (as seen below). If this block is not declared first, # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php` # to the URI, resulting in a HTTP 500 error response. location ~ \\.php(?:$|/) { # Required for legacy support rewrite ^/(?!index|remote|public|cron|core\\/ajax\\/update|status|ocs\\/v[12]|updater\\/.+|ocs-provider\\/.+|.+\\/richdocumentscode(_arm64)?\\/proxy) /index.php$request_uri; fastcgi_split_path_info ^(.+?\\.php)(/.*)$; set $path_info $fastcgi_path_info; try_files $fastcgi_script_name =404; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $path_info; fastcgi_param HTTPS on; fastcgi_param modHeadersAvailable true; # Avoid sending the security headers twice fastcgi_param front_controller_active true; # Enable pretty urls fastcgi_pass php-handler; fastcgi_intercept_errors on; fastcgi_request_buffering off; fastcgi_max_temp_file_size 0; } # Serve static files location ~ \\.(?:css|js|mjs|svg|gif|png|jpg|ico|wasm|tflite|map|ogg|flac)$ { try_files $uri /index.php$request_uri; # HTTP response headers borrowed from Nextcloud `.htaccess` add_header Cache-Control \u0026#34;public, max-age=15778463$asset_immutable\u0026#34;; add_header Referrer-Policy \u0026#34;no-referrer\u0026#34; always; add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34; always; add_header X-Frame-Options \u0026#34;SAMEORIGIN\u0026#34; always; add_header X-Permitted-Cross-Domain-Policies \u0026#34;none\u0026#34; always; add_header X-Robots-Tag \u0026#34;noindex, nofollow\u0026#34; always; add_header X-XSS-Protection \u0026#34;1; mode=block\u0026#34; always; access_log off; # Optional: Don\u0026#39;t log access to assets } location ~ \\.woff2?$ { try_files $uri /index.php$request_uri; expires 7d; # Cache-Control policy borrowed from `.htaccess` access_log off; # Optional: Don\u0026#39;t log access to assets } # Rule borrowed from `.htaccess` location /remote { return 301 /remote.php$request_uri; } location / { try_files $uri $uri/ /index.php$request_uri; } } 安装PHP 见PHP\u0026ndash;安装\nPHP调优\n安装额外php模块 1 apt -y install php8.3-imagick php8.3-redis php8.3-apcu php8.3-gmp libmagickcore-6.q16-6-extra ffmpeg libmagickcore-6.q16-6-extra是为了是imagick具有处理svg能力。\n调整 PHP 的进程数 位于fpm/pool.d/www.conf下。\n计算pm\n1 2 3 4 5 pm = dynamic pm.max_children = 120 pm.start_servers = 12 pm.min_spare_servers = 6 pm.max_spare_servers = 18 1 2 3 4 5 ;env[HOSTNAME] = $HOSTNAME ;env[PATH] = /usr/local/bin:/usr/bin:/bin ;env[TMP] = /tmp ;env[TMPDIR] = /tmp ;env[TEMP] = /tmp 改为\n1 2 3 4 5 env[HOSTNAME] = $HOSTNAME env[PATH] = /usr/local/bin:/usr/bin:/bin env[TMP] = /tmp env[TMPDIR] = /tmp env[TEMP] = /tmp 调整php内存 1 nano /etc/php/8.3/fpm/php.ini 1 2 3 4 5 memory_limit = 4096M upload_max_filesize = 10240M post_max_size = 10240M max_input_time 3600 max_execution_time 3600 1 2 3 4 5 6 7 8 [opcache] 段的末尾加入如下内容： opcache.enable=1 opcache.enable_cli=1 opcache.interned_strings_buffer=16 opcache.max_accelerated_files=10000 opcache.memory_consumption=128 opcache.save_comments=1 opcache.revalidate_freq=1 安装MariaDB 见MariaDB\u0026ndash;安装\n可前往官网下载最新的数据库安装命令。\nMySQL 的性能调优\n1 nano /etc/mysql/conf.d/mysql.cnf 在这个文件内添加如下内容，注意是 mysqld，不是 mysql，你可以在这个文件内把 mysql 这一段删除再加入下面的内容：\n1 2 3 [mysqld] innodb_buffer_pool_size=1G innodb_io_capacity=4000 重启mariadb\n1 systemctl restart mariadb.service 建立数据库\n1 2 3 4 CREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; CREATE USER \u0026#39;nextcloud\u0026#39;@\u0026#39;localhost\u0026#39;; GRANT ALL PRIVILEGES ON nextcloud.* TO \u0026#39;nextcloud\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; FLUSH PRIVILEGES; Redis安装 见Redis\u0026ndash;安装\n安装nextcloud 1 2 3 4 5 cd /home wget -O nextcloud.zip https://download.nextcloud.com/server/releases/latest.zip unzip nextcloud.zip chown -R www-data:www-data /home/nextcloud chmod 755 -R /home/nextcloud 修改配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;?php $CONFIG = array ( \u0026#39;memcache.locking\u0026#39; =\u0026gt; \u0026#39;\\\\OC\\\\Memcache\\\\Redis\u0026#39;, \u0026#39;memcache.local\u0026#39; =\u0026gt; \u0026#39;\\\\OC\\\\Memcache\\\\APCu\u0026#39;, \u0026#39;memcache.distributed\u0026#39; =\u0026gt; \u0026#39;\\\\OC\\\\Memcache\\\\Redis\u0026#39;, \u0026#39;redis\u0026#39; =\u0026gt; array ( \u0026#39;host\u0026#39; =\u0026gt; \u0026#39;127.0.0.1\u0026#39;, \u0026#39;port\u0026#39; =\u0026gt; 6379, \u0026#39;timeout\u0026#39; =\u0026gt; 0.0, ), \u0026#39;default_phone_region\u0026#39; =\u0026gt; \u0026#39;US\u0026#39;, # 增加视频预览,需要提前安装ffmpeg \u0026#39;enabledPreviewProviders\u0026#39; =\u0026gt; array ( 0 =\u0026gt; \u0026#39;OC\\\\Preview\\\\PNG\u0026#39;, 1 =\u0026gt; \u0026#39;OC\\\\Preview\\\\JPEG\u0026#39;, 2 =\u0026gt; \u0026#39;OC\\\\Preview\\\\GIF\u0026#39;, 3 =\u0026gt; \u0026#39;OC\\\\Preview\\\\HEIC\u0026#39;, 4 =\u0026gt; \u0026#39;OC\\\\Preview\\\\BMP\u0026#39;, 5 =\u0026gt; \u0026#39;OC\\\\Preview\\\\XBitmap\u0026#39;, 6 =\u0026gt; \u0026#39;OC\\\\Preview\\\\MP3\u0026#39;, 7 =\u0026gt; \u0026#39;OC\\\\Preview\\\\TXT\u0026#39;, 8 =\u0026gt; \u0026#39;OC\\\\Preview\\\\MarkDown\u0026#39;, 9 =\u0026gt; \u0026#39;OC\\\\Preview\\\\Movie\u0026#39;, ), \u0026#39;skeletondirectory\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;default_language\u0026#39; =\u0026gt; \u0026#39;zh_CN\u0026#39;, \u0026#39;default_locale\u0026#39; =\u0026gt; \u0026#39;zh\u0026#39;, \u0026#39;maintenance_window_start\u0026#39; =\u0026gt; 1, ); cron调优 1 2 3 crontab -u www-data -e */5 * * * * php --define apc.enable_cli=1 -f /home/nextcloud/cron.php crontab -u www-data -l ","date":"2024-07-13T00:00:00Z","image":"https://blog.freenet.lol/cover.jpg","permalink":"https://blog.freenet.lol/study/nextcloud--install.html","title":"nextcloud 安装及调优教程"}]